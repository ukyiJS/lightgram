name: Lightgram Build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'

      - name: Install PNPM
        run: npm install -g pnpm

      - name: Install dependencies
        run: pnpm install

      - name: Build Tauri App
        run: npm run tauri:build

      - name: Cache Node Modules
        uses: actions/cache@v2
        with:
          path: |
            ~/.pnpm-store
            **/node_modules
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

  create-release:
    needs: build
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.LIGHTGRAM_SECRET }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      - name: Get upload URL
        id: get_upload_url
        run: echo "::set-output name=upload_url::$(echo ${{ steps.create_release.outputs.upload_url }} | jq -r '.upload_url')"

      # macOS 빌드 결과물 업로드
      - name: Upload macOS DMG (if exists)
        if: matrix.os == 'macos-latest' && success()
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.LIGHTGRAM_SECRET }}
        with:
          upload_url: ${{ steps.get_upload_url.outputs.upload_url }}
          asset_path: ./src-tauri/target/release/bundle/dmg/lightgram_0.0.0_x64.dmg
          asset_name: lightgram_0.0.0_x64.dmg
          asset_content_type: application/x-apple-diskimage

      # Windows 빌드 결과물 업로드
      - name: Upload Windows Installer (if exists)
        if: matrix.os == 'windows-latest' && success()
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.LIGHTGRAM_SECRET }}
        with:
          upload_url: ${{ steps.get_upload_url.outputs.upload_url }}
          asset_path: ./src-tauri/target/release/bundle/msi/lightgram_0.0.0_x64.msi
          asset_name: lightgram_0.0.0_x64.msi
          asset_content_type: application/octet-stream